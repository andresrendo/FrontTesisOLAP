{"ast":null,"code":"export async function fetchDockerStats() {\n  const res = await fetch(`${API_BASE}/monitor/docker-stats`);\n  if (!res.ok) throw new Error('Error al obtener docker stats');\n  return await res.json();\n}\n// src/api.js\n\nconst API_BASE = 'http://localhost:3000/api';\nexport async function fetchRevenueByCountry(year = 2023) {\n  const res = await fetch(`${API_BASE}/olap/revenue-by-country?year=${year}`);\n  if (!res.ok) throw new Error('Error al obtener revenue-by-country');\n  return await res.json();\n}\nexport async function fetchTopRoutes() {\n  const res = await fetch(`${API_BASE}/olap/top-routes`);\n  if (!res.ok) throw new Error('Error al obtener top-routes');\n  return await res.json();\n}\nexport async function fetchMonitor(db) {\n  const res = await fetch(`${API_BASE}/monitor/${db}`);\n  if (!res.ok) throw new Error('Error al obtener monitor');\n  return await res.json();\n}\nexport async function fetchHealth() {\n  const res = await fetch(`${API_BASE}/health`);\n  if (!res.ok) throw new Error('Error al obtener health');\n  return await res.json();\n}\nexport async function fetchHealthPg() {\n  const res = await fetch(`${API_BASE}/health/pg`);\n  if (!res.ok) throw new Error('Error al obtener health pg');\n  return await res.json();\n}\nexport async function fetchHealthMonet() {\n  const res = await fetch(`${API_BASE}/health/monet`);\n  if (!res.ok) throw new Error('Error al obtener health monet');\n  return await res.json();\n}\nexport async function fetchTicketsByWeekday(year = 2023) {\n  const res = await fetch(`${API_BASE}/olap/tickets-by-weekday?year=${year}`);\n  if (!res.ok) throw new Error('Error al obtener tickets-by-weekday');\n  return await res.json();\n}","map":{"version":3,"names":["fetchDockerStats","res","fetch","API_BASE","ok","Error","json","fetchRevenueByCountry","year","fetchTopRoutes","fetchMonitor","db","fetchHealth","fetchHealthPg","fetchHealthMonet","fetchTicketsByWeekday"],"sources":["C:/Users/leona/Documents/frontendTesis/src/api.js"],"sourcesContent":["export async function fetchDockerStats() {\r\n  const res = await fetch(`${API_BASE}/monitor/docker-stats`);\r\n  if (!res.ok) throw new Error('Error al obtener docker stats');\r\n  return await res.json();\r\n}\r\n// src/api.js\r\n\r\nconst API_BASE = 'http://localhost:3000/api';\r\n\r\nexport async function fetchRevenueByCountry(year = 2023) {\r\n  const res = await fetch(`${API_BASE}/olap/revenue-by-country?year=${year}`);\r\n  if (!res.ok) throw new Error('Error al obtener revenue-by-country');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchTopRoutes() {\r\n  const res = await fetch(`${API_BASE}/olap/top-routes`);\r\n  if (!res.ok) throw new Error('Error al obtener top-routes');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchMonitor(db) {\r\n  const res = await fetch(`${API_BASE}/monitor/${db}`);\r\n  if (!res.ok) throw new Error('Error al obtener monitor');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchHealth() {\r\n  const res = await fetch(`${API_BASE}/health`);\r\n  if (!res.ok) throw new Error('Error al obtener health');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchHealthPg() {\r\n  const res = await fetch(`${API_BASE}/health/pg`);\r\n  if (!res.ok) throw new Error('Error al obtener health pg');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchHealthMonet() {\r\n  const res = await fetch(`${API_BASE}/health/monet`);\r\n  if (!res.ok) throw new Error('Error al obtener health monet');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchTicketsByWeekday(year = 2023) {\r\n  const res = await fetch(`${API_BASE}/olap/tickets-by-weekday?year=${year}`);\r\n  if (!res.ok) throw new Error('Error al obtener tickets-by-weekday');\r\n  return await res.json();\r\n}\r\n"],"mappings":"AAAA,OAAO,eAAeA,gBAAgBA,CAAA,EAAG;EACvC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,QAAQ,uBAAuB,CAAC;EAC3D,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAC7D,OAAO,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACzB;AACA;;AAEA,MAAMH,QAAQ,GAAG,2BAA2B;AAE5C,OAAO,eAAeI,qBAAqBA,CAACC,IAAI,GAAG,IAAI,EAAE;EACvD,MAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,QAAQ,iCAAiCK,IAAI,EAAE,CAAC;EAC3E,IAAI,CAACP,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;EACnE,OAAO,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeG,cAAcA,CAAA,EAAG;EACrC,MAAMR,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,QAAQ,kBAAkB,CAAC;EACtD,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAC3D,OAAO,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeI,YAAYA,CAACC,EAAE,EAAE;EACrC,MAAMV,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,QAAQ,YAAYQ,EAAE,EAAE,CAAC;EACpD,IAAI,CAACV,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAO,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeM,WAAWA,CAAA,EAAG;EAClC,MAAMX,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,QAAQ,SAAS,CAAC;EAC7C,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EACvD,OAAO,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeO,aAAaA,CAAA,EAAG;EACpC,MAAMZ,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,QAAQ,YAAY,CAAC;EAChD,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC1D,OAAO,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeQ,gBAAgBA,CAAA,EAAG;EACvC,MAAMb,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,QAAQ,eAAe,CAAC;EACnD,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAC7D,OAAO,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeS,qBAAqBA,CAACP,IAAI,GAAG,IAAI,EAAE;EACvD,MAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,QAAQ,iCAAiCK,IAAI,EAAE,CAAC;EAC3E,IAAI,CAACP,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;EACnE,OAAO,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}