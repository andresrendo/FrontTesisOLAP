{"ast":null,"code":"// src/api.js\n\nconst API_BASE = '/api';\nexport async function fetchQuerySql(name, opts = {}) {\n  const qs = new URLSearchParams({\n    name,\n    ...(opts.year ? {\n      year: opts.year\n    } : {}),\n    ...(opts.limit ? {\n      limit: opts.limit\n    } : {})\n  });\n  const res = await fetch(`${API_BASE}/olap/query-sql?${qs.toString()}`);\n  const text = await res.text().catch(() => '');\n  if (!res.ok) {\n    throw new Error(`fetchQuerySql failed: ${res.status} ${text}`);\n  }\n  // intenta parsear JSON (el backend devuelve JSON)\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    // si no es JSON, devolver raw string en estructura consistente\n    return {\n      ok: true,\n      name,\n      pg: text,\n      monet: text\n    };\n  }\n}\nexport async function fetchRevenueByCountry(year = 2023) {\n  const res = await fetch(`${API_BASE}/olap/revenue-by-country?year=${year}`);\n  if (!res.ok) throw new Error('Error al obtener revenue-by-country');\n  return await res.json();\n}\nexport async function fetchTopRoutes() {\n  const res = await fetch(`${API_BASE}/olap/top-routes`);\n  if (!res.ok) throw new Error('Error al obtener top-routes');\n  return await res.json();\n}\nexport async function fetchMonitor(db) {\n  const q = db ? `?db=${encodeURIComponent(db)}` : '';\n  const res = await fetch(`/api/monitor${q}`);\n  if (!res.ok) throw new Error(await res.text());\n  return res.json();\n}\nexport async function fetchHealth() {\n  const res = await fetch(`${API_BASE}/health`);\n  if (!res.ok) throw new Error('Error al obtener health');\n  return await res.json();\n}\nexport async function fetchHealthPg() {\n  const res = await fetch(`${API_BASE}/health/pg`);\n  if (!res.ok) throw new Error('Error al obtener health pg');\n  return await res.json();\n}\nexport async function fetchHealthMonet() {\n  const res = await fetch(`${API_BASE}/health/monet`);\n  if (!res.ok) throw new Error('Error al obtener health monet');\n  return await res.json();\n}\nexport async function fetchTicketsByWeekday(year = 2023) {\n  const res = await fetch(`${API_BASE}/olap/tickets-by-weekday?year=${year}`);\n  if (!res.ok) throw new Error('Error al obtener tickets-by-weekday');\n  return await res.json();\n}\nexport async function fetchLeastTravelledNationality(year = 2023, limit = 1) {\n  const res = await fetch(`${API_BASE}/olap/least-travelled-nationality?year=${year}&limit=${limit}`);\n  if (!res.ok) throw new Error('Error al obtener least-travelled-nationality');\n  return await res.json();\n}\nexport async function fetchRevenueBySeatClassAndMonth(year = 2023) {\n  const res = await fetch(`${API_BASE}/olap/revenue-by-seatclass-month?year=${year}`);\n  if (!res.ok) throw new Error('Error al obtener revenue-by-seatclass-month');\n  return await res.json();\n}\nexport async function fetchDelayedAverage(year = 2023) {\n  const res = await fetch(`${API_BASE}/olap/delayed-average?year=${year}`);\n  if (!res.ok) throw new Error('Error al obtener delayed-average');\n  return await res.json();\n}\nexport async function fetchPassengersByAircraft(year = 2023) {\n  const res = await fetch(`${API_BASE}/olap/passengers-by-aircraft?year=${year}`);\n  if (!res.ok) throw new Error('Error al obtener passengers-by-aircraft');\n  return await res.json();\n}\nexport async function fetchAdjustedProfitRoutes(year = 2023, limit = 20) {\n  const res = await fetch(`${API_BASE}/olap/adjusted-profit-routes?year=${year}&limit=${limit}`);\n  if (!res.ok) throw new Error('Error al obtener adjusted-profit-routes');\n  return await res.json();\n}\nexport async function fetchFrequentPassengerRevenue(year = 2023, limit = 20) {\n  const res = await fetch(`${API_BASE}/olap/frequent-passenger-revenue?year=${year}&limit=${limit}`);\n  if (!res.ok) throw new Error('Error al obtener frequent-passenger-revenue');\n  return await res.json();\n}\nexport async function addFlights(count = 100) {\n  const res = await fetch(`${API_BASE}/olap/add-flights-new?count=${count}`, {\n    method: 'POST'\n  });\n  if (!res.ok) throw new Error('Error al agregar vuelos');\n  return await res.json();\n}\nexport async function removeFlights(count = 100) {\n  const res = await fetch(`${API_BASE}/olap/remove-flights-new?count=${count}`, {\n    method: 'POST'\n  });\n  if (!res.ok) throw new Error('Error al eliminar vuelos');\n  return await res.json();\n}\n\n// Legacy / row-by-row (mantener compatibilidad)\nexport async function addFlightsRow(count = 100) {\n  const res = await fetch(`${API_BASE}/olap/add-flights-row?count=${count}`, {\n    method: 'POST'\n  });\n  if (!res.ok) throw new Error('Error al agregar vuelos (row)');\n  return await res.json();\n}\nexport async function removeFlightsRow(count = 100) {\n  const res = await fetch(`${API_BASE}/olap/remove-flights-row?count=${count}`, {\n    method: 'POST'\n  });\n  if (!res.ok) throw new Error('Error al eliminar vuelos (row)');\n  return await res.json();\n}\n\n// Batch endpoints\nexport async function addFlightsBatch(count = 100) {\n  const res = await fetch(`${API_BASE}/olap/add-flights-batch?count=${count}`, {\n    method: 'POST'\n  });\n  if (!res.ok) throw new Error('Error al agregar vuelos (batch)');\n  return await res.json();\n}\nexport async function removeFlightsBatch(count = 100) {\n  const res = await fetch(`${API_BASE}/olap/remove-flights-batch?count=${count}`, {\n    method: 'POST'\n  });\n  if (!res.ok) throw new Error('Error al eliminar vuelos (batch)');\n  return await res.json();\n}\n\n// Opcional: mantener alias viejo por compatibilidad (renombrados para evitar colisión)\nexport const addFlightsLegacy = addFlightsRow;\nexport const removeFlightsLegacy = removeFlightsRow;\nexport async function fetchDockerStats() {\n  const res = await fetch(`${API_BASE}/monitor/docker-stats`);\n  if (!res.ok) throw new Error('Error al obtener docker stats');\n  return await res.json();\n}\n\n// nueva función para tamaños\nexport async function fetchDbSizes(intervalMs = 0) {\n  const q = intervalMs > 0 ? `?intervalMs=${intervalMs}` : '';\n  const res = await fetch(`${API_BASE}/monitor/db-sizes${q}`);\n  if (!res.ok) throw new Error(await res.text());\n  return res.json();\n}","map":{"version":3,"names":["API_BASE","fetchQuerySql","name","opts","qs","URLSearchParams","year","limit","res","fetch","toString","text","catch","ok","Error","status","JSON","parse","e","pg","monet","fetchRevenueByCountry","json","fetchTopRoutes","fetchMonitor","db","q","encodeURIComponent","fetchHealth","fetchHealthPg","fetchHealthMonet","fetchTicketsByWeekday","fetchLeastTravelledNationality","fetchRevenueBySeatClassAndMonth","fetchDelayedAverage","fetchPassengersByAircraft","fetchAdjustedProfitRoutes","fetchFrequentPassengerRevenue","addFlights","count","method","removeFlights","addFlightsRow","removeFlightsRow","addFlightsBatch","removeFlightsBatch","addFlightsLegacy","removeFlightsLegacy","fetchDockerStats","fetchDbSizes","intervalMs"],"sources":["C:/Users/leona/Documents/frontendTesis/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\nconst API_BASE = '/api';\r\n\r\nexport async function fetchQuerySql(name, opts = {}) {\r\n  const qs = new URLSearchParams({\r\n    name,\r\n    ...(opts.year ? { year: opts.year } : {}),\r\n    ...(opts.limit ? { limit: opts.limit } : {})\r\n  });\r\n  const res = await fetch(`${API_BASE}/olap/query-sql?${qs.toString()}`);\r\n  const text = await res.text().catch(() => '');\r\n  if (!res.ok) {\r\n    throw new Error(`fetchQuerySql failed: ${res.status} ${text}`);\r\n  }\r\n  // intenta parsear JSON (el backend devuelve JSON)\r\n  try {\r\n    return JSON.parse(text);\r\n  } catch (e) {\r\n    // si no es JSON, devolver raw string en estructura consistente\r\n    return { ok: true, name, pg: text, monet: text };\r\n  }\r\n}\r\n\r\nexport async function fetchRevenueByCountry(year = 2023) {\r\n  const res = await fetch(`${API_BASE}/olap/revenue-by-country?year=${year}`);\r\n  if (!res.ok) throw new Error('Error al obtener revenue-by-country');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchTopRoutes() {\r\n  const res = await fetch(`${API_BASE}/olap/top-routes`);\r\n  if (!res.ok) throw new Error('Error al obtener top-routes');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchMonitor(db) {\r\n  const q = db ? `?db=${encodeURIComponent(db)}` : '';\r\n  const res = await fetch(`/api/monitor${q}`);\r\n  if (!res.ok) throw new Error(await res.text());\r\n  return res.json();\r\n}\r\n\r\nexport async function fetchHealth() {\r\n  const res = await fetch(`${API_BASE}/health`);\r\n  if (!res.ok) throw new Error('Error al obtener health');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchHealthPg() {\r\n  const res = await fetch(`${API_BASE}/health/pg`);\r\n  if (!res.ok) throw new Error('Error al obtener health pg');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchHealthMonet() {\r\n  const res = await fetch(`${API_BASE}/health/monet`);\r\n  if (!res.ok) throw new Error('Error al obtener health monet');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchTicketsByWeekday(year = 2023) {\r\n  const res = await fetch(`${API_BASE}/olap/tickets-by-weekday?year=${year}`);\r\n  if (!res.ok) throw new Error('Error al obtener tickets-by-weekday');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchLeastTravelledNationality(year = 2023, limit = 1) {\r\n  const res = await fetch(`${API_BASE}/olap/least-travelled-nationality?year=${year}&limit=${limit}`);\r\n  if (!res.ok) throw new Error('Error al obtener least-travelled-nationality');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchRevenueBySeatClassAndMonth(year = 2023) {\r\n  const res = await fetch(`${API_BASE}/olap/revenue-by-seatclass-month?year=${year}`);\r\n  if (!res.ok) throw new Error('Error al obtener revenue-by-seatclass-month');\r\n  return await res.json();\r\n}\r\n\r\n\r\nexport async function fetchDelayedAverage(year = 2023) {\r\n  const res = await fetch(`${API_BASE}/olap/delayed-average?year=${year}`);\r\n  if (!res.ok) throw new Error('Error al obtener delayed-average');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchPassengersByAircraft(year = 2023) {\r\n  const res = await fetch(`${API_BASE}/olap/passengers-by-aircraft?year=${year}`);\r\n  if (!res.ok) throw new Error('Error al obtener passengers-by-aircraft');\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchAdjustedProfitRoutes(year = 2023, limit = 20) {\r\n  const res = await fetch(`${API_BASE}/olap/adjusted-profit-routes?year=${year}&limit=${limit}`);\r\n  if (!res.ok) throw new Error('Error al obtener adjusted-profit-routes');\r\n  return await res.json();\r\n}\r\n\r\n\r\nexport async function fetchFrequentPassengerRevenue(year = 2023, limit = 20) {\r\n  const res = await fetch(`${API_BASE}/olap/frequent-passenger-revenue?year=${year}&limit=${limit}`);\r\n  if (!res.ok) throw new Error('Error al obtener frequent-passenger-revenue');\r\n  return await res.json();\r\n}\r\n\r\nexport async function addFlights(count = 100) {\r\n  const res = await fetch(`${API_BASE}/olap/add-flights-new?count=${count}`, { method: 'POST' });\r\n  if (!res.ok) throw new Error('Error al agregar vuelos');\r\n  return await res.json();\r\n}\r\n\r\nexport async function removeFlights(count = 100) {\r\n  const res = await fetch(`${API_BASE}/olap/remove-flights-new?count=${count}`, { method: 'POST' });\r\n  if (!res.ok) throw new Error('Error al eliminar vuelos');\r\n  return await res.json();\r\n}\r\n\r\n// Legacy / row-by-row (mantener compatibilidad)\r\nexport async function addFlightsRow(count = 100) {\r\n  const res = await fetch(`${API_BASE}/olap/add-flights-row?count=${count}`, { method: 'POST' });\r\n  if (!res.ok) throw new Error('Error al agregar vuelos (row)');\r\n  return await res.json();\r\n}\r\nexport async function removeFlightsRow(count = 100) {\r\n  const res = await fetch(`${API_BASE}/olap/remove-flights-row?count=${count}`, { method: 'POST' });\r\n  if (!res.ok) throw new Error('Error al eliminar vuelos (row)');\r\n  return await res.json();\r\n}\r\n\r\n// Batch endpoints\r\nexport async function addFlightsBatch(count = 100) {\r\n  const res = await fetch(`${API_BASE}/olap/add-flights-batch?count=${count}`, { method: 'POST' });\r\n  if (!res.ok) throw new Error('Error al agregar vuelos (batch)');\r\n  return await res.json();\r\n}\r\nexport async function removeFlightsBatch(count = 100) {\r\n  const res = await fetch(`${API_BASE}/olap/remove-flights-batch?count=${count}`, { method: 'POST' });\r\n  if (!res.ok) throw new Error('Error al eliminar vuelos (batch)');\r\n  return await res.json();\r\n}\r\n\r\n// Opcional: mantener alias viejo por compatibilidad (renombrados para evitar colisión)\r\nexport const addFlightsLegacy = addFlightsRow;\r\nexport const removeFlightsLegacy = removeFlightsRow;\r\n\r\nexport async function fetchDockerStats() {\r\n  const res = await fetch(`${API_BASE}/monitor/docker-stats`);\r\n  if (!res.ok) throw new Error('Error al obtener docker stats');\r\n  return await res.json();\r\n}\r\n\r\n// nueva función para tamaños\r\nexport async function fetchDbSizes(intervalMs = 0) {\r\n  const q = intervalMs > 0 ? `?intervalMs=${intervalMs}` : '';\r\n  const res = await fetch(`${API_BASE}/monitor/db-sizes${q}`);\r\n  if (!res.ok) throw new Error(await res.text());\r\n  return res.json();\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}