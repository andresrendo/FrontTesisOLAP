{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { fetchQuerySql } from '../api';\nexport default function useQuerySql(name, opts = {}) {\n  _s();\n  const [sqls, setSqls] = useState(null);\n  useEffect(() => {\n    let mounted = true;\n    if (!name) return;\n    setSqls(null);\n    fetchQuerySql(name, opts).then(r => {\n      if (!mounted) return;\n      if (r && r.ok) {\n        // asegurar que pg/monet son strings\n        const pg = typeof r.pg === 'string' ? r.pg : JSON.stringify(r.pg, null, 2);\n        const monet = typeof r.monet === 'string' ? r.monet : JSON.stringify(r.monet, null, 2);\n        setSqls({\n          pg,\n          monet\n        });\n      } else {\n        setSqls(null);\n      }\n    }).catch(err => {\n      console.error('useQuerySql error', name, err);\n      if (mounted) setSqls(null);\n    });\n    return () => {\n      mounted = false;\n    };\n  }, [name, JSON.stringify(opts)]);\n  return sqls;\n}\n_s(useQuerySql, \"9CRXakPg5bexUtHjFkeagFTry90=\");","map":{"version":3,"names":["useEffect","useState","fetchQuerySql","useQuerySql","name","opts","_s","sqls","setSqls","mounted","then","r","ok","pg","JSON","stringify","monet","catch","err","console","error"],"sources":["C:/Users/leona/Documents/frontendTesis/src/hooks/useQuerySql.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { fetchQuerySql } from '../api';\r\n\r\nexport default function useQuerySql(name, opts = {}) {\r\n  const [sqls, setSqls] = useState(null);\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (!name) return;\r\n    setSqls(null);\r\n    fetchQuerySql(name, opts)\r\n      .then(r => {\r\n        if (!mounted) return;\r\n        if (r && r.ok) {\r\n          // asegurar que pg/monet son strings\r\n          const pg = typeof r.pg === 'string' ? r.pg : JSON.stringify(r.pg, null, 2);\r\n          const monet = typeof r.monet === 'string' ? r.monet : JSON.stringify(r.monet, null, 2);\r\n          setSqls({ pg, monet });\r\n        } else {\r\n          setSqls(null);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error('useQuerySql error', name, err);\r\n        if (mounted) setSqls(null);\r\n      });\r\n    return () => { mounted = false; };\r\n  }, [name, JSON.stringify(opts)]);\r\n  return sqls;\r\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,QAAQ;AAEtC,eAAe,SAASC,WAAWA,CAACC,IAAI,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAAAC,EAAA;EACnD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtCD,SAAS,CAAC,MAAM;IACd,IAAIS,OAAO,GAAG,IAAI;IAClB,IAAI,CAACL,IAAI,EAAE;IACXI,OAAO,CAAC,IAAI,CAAC;IACbN,aAAa,CAACE,IAAI,EAAEC,IAAI,CAAC,CACtBK,IAAI,CAACC,CAAC,IAAI;MACT,IAAI,CAACF,OAAO,EAAE;MACd,IAAIE,CAAC,IAAIA,CAAC,CAACC,EAAE,EAAE;QACb;QACA,MAAMC,EAAE,GAAG,OAAOF,CAAC,CAACE,EAAE,KAAK,QAAQ,GAAGF,CAAC,CAACE,EAAE,GAAGC,IAAI,CAACC,SAAS,CAACJ,CAAC,CAACE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1E,MAAMG,KAAK,GAAG,OAAOL,CAAC,CAACK,KAAK,KAAK,QAAQ,GAAGL,CAAC,CAACK,KAAK,GAAGF,IAAI,CAACC,SAAS,CAACJ,CAAC,CAACK,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACtFR,OAAO,CAAC;UAAEK,EAAE;UAAEG;QAAM,CAAC,CAAC;MACxB,CAAC,MAAM;QACLR,OAAO,CAAC,IAAI,CAAC;MACf;IACF,CAAC,CAAC,CACDS,KAAK,CAACC,GAAG,IAAI;MACZC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEhB,IAAI,EAAEc,GAAG,CAAC;MAC7C,IAAIT,OAAO,EAAED,OAAO,CAAC,IAAI,CAAC;IAC5B,CAAC,CAAC;IACJ,OAAO,MAAM;MAAEC,OAAO,GAAG,KAAK;IAAE,CAAC;EACnC,CAAC,EAAE,CAACL,IAAI,EAAEU,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAC,CAAC;EAChC,OAAOE,IAAI;AACb;AAACD,EAAA,CAzBuBH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}